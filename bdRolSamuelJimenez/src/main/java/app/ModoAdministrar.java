/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import controladores.JugadoresJpaController;
import controladores.PersonajesJpaController;
import controladores.UsuariosJpaController;
import controladores.exceptions.NonexistentEntityException;
import entidades.Jugadores;
import entidades.Personajes;
import entidades.Usuarios;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.AccessDeniedException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Persistence;
import javax.swing.JComboBox;
import main.BdRolSamuelJimenez;

/**
 *
 * @author sajm <sjimmaz322 at sjimmaz322@g.educaand.es>
 */
public class ModoAdministrar extends javax.swing.JFrame {

    UsuariosJpaController ujc = new UsuariosJpaController();
    JugadoresJpaController jjc = new JugadoresJpaController();
    PersonajesJpaController pjc = new PersonajesJpaController();

    /**
     * Creates new form ModoAdministrar
     */
    public ModoAdministrar() {
        initComponents();
        crearDirectorio("./copias");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDescargar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaCopiasSeguridad = new javax.swing.JList<>();
        btnComprobar = new javax.swing.JButton();
        btnRestaurar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ADMINISTRACION DE BBDD");
        setLocation(new java.awt.Point(500, 200));
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDescargar.setText("DESCARGAR");
        btnDescargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescargarActionPerformed(evt);
            }
        });
        getContentPane().add(btnDescargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 160, -1));

        jScrollPane1.setViewportView(listaCopiasSeguridad);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 690, 220));

        btnComprobar.setText("COMPROBAR COPIAS");
        btnComprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprobarActionPerformed(evt);
            }
        });
        getContentPane().add(btnComprobar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 160, -1));

        btnRestaurar.setText("RESTAURAR");
        btnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRestaurar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 490, 160, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondoGestionar.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescargarActionPerformed
        // TODO add your handling code here:

        List<Usuarios> users = ujc.findUsuariosEntities();
        List<Jugadores> players = jjc.findJugadoresEntities();
        List<Personajes> pjs = pjc.findPersonajesEntities();
        String momentoCopia = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy-HH'h'-mm'm'-ss's'"));
        String ruta = "./copias/".concat(momentoCopia);
        crearDirectorio(ruta);
        generarFicheroUsuarios(ruta, "usuarios", "csv", users);
        generarFicheroJugadores(ruta, "jugadores", "csv", players);
        generarFicheroPersonajes(ruta, "personajes", "csv", pjs);

    }//GEN-LAST:event_btnDescargarActionPerformed

    private void btnComprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprobarActionPerformed
        // TODO add your handling code here:
        listarDirectorio("./copias/");
    }//GEN-LAST:event_btnComprobarActionPerformed

    private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarActionPerformed
        // TODO add your handling code here:
        List<Personajes> pjs = pjc.findPersonajesEntities();
        for (Personajes u : pjs) {
            try {
                pjc.destroy(u.getId());
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(ModoAdministrar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        List<Jugadores> players = jjc.findJugadoresEntities();
        for (Jugadores u : players) {
            try {
                jjc.destroy(u.getId());
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(ModoAdministrar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        List<Usuarios> users = ujc.findUsuariosEntities();
        for (Usuarios u : users) {
            try {
                ujc.destroy(u.getCodUsuario());
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(ModoAdministrar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        String copia = listaCopiasSeguridad.getSelectedValue();
        String ruta = "./copias/" + copia + "/";
        restaurarUsuarios(ruta.concat("usuarios.csv"), ";");
        restaurarJugadores(ruta.concat("jugadores.csv"), ";");
        restaurarPersonajes(ruta.concat("personajes.csv"), ";");

    }//GEN-LAST:event_btnRestaurarActionPerformed
    public static void crearDirectorio(String ruta) {

        Path directory = Paths.get(ruta);
        try {
            Files.createDirectory(directory);
        } catch (FileAlreadyExistsException faee) {
            System.out.println("No se puede crear " + ruta + " porque ya existe");
        } catch (AccessDeniedException ade) {
            System.out.println("No tiene permisos para crear " + ruta);
        } catch (IOException e) {
            System.out.println("Problema creando el directorio " + ruta);
            System.out.println("Seguramente la ruta está mal escrita o no existe");
        }

    }

    public void listarDirectorio(String ruta) {
        // Convertir la lista de nombres a un arreglo

        List<String> copias = new ArrayList<>();
        // Cargar la lista en el JComboBox

        // Asignar el JComboBox a tu control Swing
        // Por ejemplo, si tu control se llama "comboBoxUsuarios", puedes hacer:
        File f = new File(ruta);
        if (f.exists()) {
            // Obtiene los ficheros y directorios dentro de f y los 
            // devuelve en un array
            File[] ficheros = f.listFiles();
            for (File file2 : ficheros) {
                copias.add(file2.getName());

            }
        } else {
            System.out.println("El directorio a listar no existe");
        }
        String[] lista = copias.toArray(new String[0]);
        JComboBox<String> comboBox = new JComboBox<>(lista);
        listaCopiasSeguridad.setModel(comboBox.getModel());
    }

    public static void generarFicheroUsuarios(String ruta, String nomFichero, String formato, List<Usuarios> lista) {
        // Fichero a crear. Ruta relativa a la carpeta raíz del proyecto
        String idFichero = "./" + ruta + "/" + nomFichero + "." + formato;
        String tmp;
        //
        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : lista) {
                tmp = f.toString();
                flujo.write(tmp);
                flujo.newLine();
            }
            flujo.flush();
            System.out.println("Fichero " + nomFichero + ".csv creado correctamente.");
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void generarFicheroJugadores(String ruta, String nomFichero, String formato, List<Jugadores> lista) {
        // Fichero a crear. Ruta relativa a la carpeta raíz del proyecto
        String idFichero = "./" + ruta + "/" + nomFichero + "." + formato;
        String tmp;
        //
        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : lista) {
                tmp = f.toString();
                flujo.write(tmp);
                flujo.newLine();
            }
            flujo.flush();
            System.out.println("Fichero " + nomFichero + ".csv creado correctamente.");
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void generarFicheroPersonajes(String ruta, String nomFichero, String formato, List<Personajes> lista) {
        // Fichero a crear. Ruta relativa a la carpeta raíz del proyecto
        String idFichero = "./" + ruta + "/" + nomFichero + "." + formato;
        String tmp;
        //
        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : lista) {
                tmp = f.toString();
                flujo.write(tmp);
                flujo.newLine();
            }
            flujo.flush();
            System.out.println("Fichero " + nomFichero + ".csv creado correctamente.");
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    public void restaurarUsuarios(String ruta, String separador) {
        List<Usuarios> lista = new ArrayList<>();
        int contador = 1;
        //---

        // Variables para guardar los datos que se van leyendo
        String[] tokens;
        String linea;
        //---

        //---
        Usuarios u = null;
        //---
        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer
            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String
                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la
                // línea en función del carácter separador de campos del fichero CSV
                tokens = linea.split(separador);
                // Convierte en String tokens
                //--- Dependiendo de como empiece la línea sabremos que tipo de objeto es
                //--- Usamos los tokens[] para guardar cada atributo según el constructor

                u = new Usuarios();
                u.setCodUsuario(contador++);
                u.setNombre(tokens[1]);
                u.setEdad(Integer.valueOf(tokens[2]));
                u.setDireccion(tokens[3]);
                LocalDate fecha = LocalDate.parse(tokens[4]);
                u.setFecCumpleanios(utilidades.Utilidades.localToDate(fecha));

                u.setJugador(null);
                //--- Añadimos el Vehículo a la lista
                lista.add(u);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (Usuarios user : lista) {
            ujc.create(user);
        }

    }

    public void restaurarJugadores(String ruta, String separador) {
        List<Jugadores> lista = new ArrayList<>();
        int contador = 1;
        //---

        // Variables para guardar los datos que se van leyendo
        String[] tokens;
        String linea;
        //---

        //---
        Jugadores u = null;
        //---
        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer
            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String
                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la
                // línea en función del carácter separador de campos del fichero CSV
                tokens = linea.split(separador);
                // Convierte en String tokens
                //--- Dependiendo de como empiece la línea sabremos que tipo de objeto es
                //--- Usamos los tokens[] para guardar cada atributo según el constructor

                u = new Jugadores();

                u.setId(Integer.valueOf(tokens[0]));
                u.setApodo(tokens[1]);
                u.setSistemaPredilecto(tokens[2]);
                u.setRolPreferido(tokens[3]);
                u.setPersonajesList(new ArrayList<Personajes>());
                u.setCodUsuario(ujc.findByNombre(tokens[5]));

                lista.add(u);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (Jugadores user : lista) {
            jjc.create(user);
        }

    }

    public void restaurarPersonajes(String ruta, String separador) {
        List<Personajes> lista = new ArrayList<>();
        int contador = 1;
        //---

        // Variables para guardar los datos que se van leyendo
        String[] tokens;
        String linea;
        //---

        //---
        Personajes u = null;
        //---
        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer
            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String
                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la
                // línea en función del carácter separador de campos del fichero CSV
                tokens = linea.split(separador);
                // Convierte en String tokens
                //--- Dependiendo de como empiece la línea sabremos que tipo de objeto es
                //--- Usamos los tokens[] para guardar cada atributo según el constructor

                u = new Personajes();

                u.setId(Integer.valueOf(tokens[0]));
                u.setNombre(tokens[1]);
                u.setArquetipo(tokens[2]);
                u.setTrasfondo(tokens[3]);
                u.setNivel(Integer.valueOf(tokens[4]));
                u.setAlineacion(tokens[5]);
                u.setIdJugador(jjc.findByApodo(tokens[6]));
                lista.add(u);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (Personajes pjs : lista) {
            pjc.create(pjs);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModoAdministrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModoAdministrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModoAdministrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModoAdministrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModoAdministrar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComprobar;
    private javax.swing.JButton btnDescargar;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaCopiasSeguridad;
    // End of variables declaration//GEN-END:variables
}
